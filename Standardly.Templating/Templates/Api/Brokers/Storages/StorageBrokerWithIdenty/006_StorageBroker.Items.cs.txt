using System;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.ChangeTracking;
using $rootnamespace$.$models$.$safeItemNamePlural$;

namespace $rootnamespace$.$brokers$.Storages
{
    public partial class StorageBroker
    {
        public DbSet<$safeItemNameSingular$> $safeItemNamePlural$ { get; set; }

        public async ValueTask<$safeItemNameSingular$> Insert$safeItemNameSingular$Async($safeItemNameSingular$ $parameterSafeItemNameSingular$)
        {
            using var broker =
                new StorageBroker(this.configuration);

            EntityEntry<$safeItemNameSingular$> $parameterSafeItemNameSingular$EntityEntry =
                await broker.$safeItemNamePlural$.AddAsync($parameterSafeItemNameSingular$);

            await broker.SaveChangesAsync();

            return $parameterSafeItemNameSingular$EntityEntry.Entity;
        }

        public IQueryable<$safeItemNameSingular$> SelectAll$safeItemNamePlural$()
        {
            using var broker =
                new StorageBroker(this.configuration);

            return broker.$safeItemNamePlural$;
        }

        public async ValueTask<$safeItemNameSingular$> Select$safeItemNameSingular$ByIdAsync(Guid $parameterSafeItemNameSingular$Id)
        {
            using var broker =
                new StorageBroker(this.configuration);

            return await broker.$safeItemNamePlural$.FindAsync($parameterSafeItemNameSingular$Id);
        }

        public async ValueTask<$safeItemNameSingular$> Update$safeItemNameSingular$Async($safeItemNameSingular$ $parameterSafeItemNameSingular$)
        {
            using var broker =
                new StorageBroker(this.configuration);

            EntityEntry<$safeItemNameSingular$> $parameterSafeItemNameSingular$EntityEntry =
                broker.$safeItemNamePlural$.Update($parameterSafeItemNameSingular$);

            await broker.SaveChangesAsync();

            return $parameterSafeItemNameSingular$EntityEntry.Entity;
        }
    }
}
