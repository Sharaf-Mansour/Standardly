using System;
using System.Threading.Tasks;
using $rootnamespace$.$models$.$safeItemNamePlural$;

namespace $rootnamespace$.$brokers$.Events
{
    public partial interface IEventBroker
    {
        void SubscribeTo$safeItemNameSingular$AddEvent(
            Func<$safeItemNameSingular$, ValueTask<$safeItemNameSingular$>> 
                $parameterSafeItemNameSingular$AddEventHandler);

        ValueTask Publish$safeItemNameSingular$AddEventAsync($safeItemNameSingular$ $parameterSafeItemNameSingular$);
        
        void SubscribeTo$safeItemNameSingular$ModifyEvent(
            Func<$safeItemNameSingular$, ValueTask<$safeItemNameSingular$>> 
                $parameterSafeItemNameSingular$ModifyEventHandler);

        ValueTask Publish$safeItemNameSingular$ModifyEventAsync($safeItemNameSingular$ $parameterSafeItemNameSingular$);

        void SubscribeTo$safeItemNameSingular$RemoveEvent(
            Func<$safeItemNameSingular$, ValueTask<$safeItemNameSingular$>> 
                $parameterSafeItemNameSingular$RemoveEventHandler);

        ValueTask Publish$safeItemNameSingular$RemoveEventAsync($safeItemNameSingular$ $parameterSafeItemNameSingular$);
    }
}
